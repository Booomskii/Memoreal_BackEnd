CREATE DATABASE MEMOREAL_DATABASE
GO

USE MEMOREAL_DATABASE

-- TABLE CREATIONS --

CREATE TABLE [USER]
(
    USERID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
    USERNAME VARCHAR(100) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR(100) NULL,
    MI CHAR(2) NULL,
    LAST_NAME VARCHAR(100) NULL,
    CONTACT_NUMBER VARCHAR(11) NULL,
    EMAIL VARCHAR(100) UNIQUE NULL,
    BIRTHDATE DATE NULL,
    PICTURE VARCHAR(255) NULL,
    HASHED_PASSWORD VARCHAR(255) NOT NULL,
    REGISTRATIONDATE DATETIME NOT NULL DEFAULT GETDATE()
)
SELECT * FROM [USER]

CREATE TABLE PAYMENT
(
	PAYMENTID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, USERID INT NOT NULL
	, OBITUARYID INT NOT NULL
	, AMOUNT DECIMAL(10,2) NOT NULL
	, PAYMENTDATE DATETIME DEFAULT GETDATE()
	, PAYMENTMETHOD VARCHAR(50) NOT NULL
	, PAYMENT_STATUS VARCHAR(20) NOT NULL CHECK(PAYMENT_STATUS IN ('PENDING', 'COMPLETED', 'FAILED', 'CANCELLED', 'REFUNDED'))
	, FOREIGN KEY (USERID) REFERENCES [USER](USERID)
	, FOREIGN KEY (OBITUARYID) REFERENCES OBITUARY(OBITUARYID)
)
SELECT * FROM PAYMENT

CREATE TABLE OBITUARY
(
	OBITUARYID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, USERID INT NOT NULL
	, GALLERYID INT NOT NULL
	, FAMILYID INT NOT NULL
	, OBITCUSTID INT NOT NULL
	, BIOGRAPHY VARCHAR(1000)
	, OBITUARYNAME VARCHAR(100) NOT NULL
	, OBITUARY_PHOTO NVARCHAR(255) NOT NULL
	, DATEOFBIRTH DATE NOT NULL
	, DATEOFDEATH DATE NOT NULL
	, KEYEVENTS VARCHAR(300) NOT NULL
	, OBITUARYTEXT VARCHAR(1000) NOT NULL
	, FUN_DATETIME DATETIME
	, FUN_LOCATION VARCHAR(300)
	, ADTLINFO VARCHAR(300)
	, FAVORITEQUOTE VARCHAR(100)
	, PRIVACY VARCHAR(10) NOT NULL CHECK(PRIVACY IN ('PRIVATE','PUBLIC'))
	, ENAGUESTBOOK BIT NOT NULL
	, CREATIONDATE DATETIME NOT NULL DEFAULT GETDATE()
	, LASTMODIFIED DATETIME NOT NULL
	, FOREIGN KEY (USERID) REFERENCES [USER](USERID)
	, FOREIGN KEY (GALLERYID) REFERENCES GALLERY(GALLERYID)
	, FOREIGN KEY (FAMILYID) REFERENCES FAMILY(FAMILYID)
	, FOREIGN KEY (OBITCUSTID) REFERENCES OBITUARY_CUSTOMIZATION(OBITCUSTID)
)
SELECT * FROM OBITUARY

ALTER TABLE OBITUARY
ALTER COLUMN BIOGRAPHY VARCHAR(1000) NOT NULL
ALTER COLUMN OBITUARYTEXT VARCHAR(1000) NOT NULL

CREATE TABLE OBITUARY_CUSTOMIZATION
(
	OBITCUSTID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, BGTHEME VARCHAR(20) NOT NULL
	, PICFRAME VARCHAR(20) NOT NULL
	, BGMUSIC VARCHAR(50) NOT NULL
	, VFLOWER VARCHAR(20) NOT NULL
	, VCANDLE VARCHAR(10) NOT NULL
)

CREATE TABLE GUESTBOOK
(
	GUESTBOOKID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, USERID INT
	, OBITUARYID INT NOT NULL
	, GUESTNAME VARCHAR(255) NOT NULL
	, [MESSAGE] VARCHAR(300)
	, POSTINGDATE DATETIME DEFAULT GETDATE() NOT NULL
	, FOREIGN KEY (USERID) REFERENCES [USER](USERID)
	, FOREIGN KEY (OBITUARYID) REFERENCES OBITUARY(OBITUARYID)
)
SELECT * FROM GUESTBOOK
DELETE FROM GUESTBOOK
DBCC CHECKIDENT(GUESTBOOK,RESEED,0)

CREATE TABLE TRIBUTE
(
	TRIBUTEID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, USERID INT NOT NULL
	, OBITUARYID INT NOT NULL
	, OFFEREDFLOWER BIT NOT NULL DEFAULT 0
	, LIGHTEDCANDLE BIT NOT NULL DEFAULT 0
	, OFFERINGDATE DATE NOT NULL DEFAULT GETDATE()
)

CREATE TABLE GALLERY
(
	GALLERYID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, CREATIONDATE DATETIME NOT NULL
	, MODIFIEDDATE DATETIME NOT NULL
)

CREATE TABLE GALLERYMEDIA
(
	GALLERYMEDIAID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, GALLERYID INT NOT NULL
	, MEDIATYPE VARCHAR(50) NOT NULL
	, [FILENAME] VARCHAR(255) NOT NULL
	, FILESIZE DECIMAL(6,2) NOT NULL
	, UPLOADDATE DATETIME NOT NULL DEFAULT GETDATE()
	, FOREIGN KEY (GALLERYID) REFERENCES GALLERY(GALLERYID)
)
SELECT * FROM GALLERYMEDIA

CREATE TABLE FAMILY
(
	FAMILYID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, DATECREATED DATETIME NOT NULL
	, MODIFIEDDATE DATETIME NOT NULL
)
SELECT * FROM FAMILY

CREATE TABLE FAMILYMEMBERS
(
	MEMBERSID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, FAMILYID INT NOT NULL
	, MEMBERNAME VARCHAR(200) NOT NULL
	, RELATIONSHIP VARCHAR(50) NOT NULL
	, DATEADDED DATETIME DEFAULT GETDATE() NOT NULL
)
ALTER TABLE FAMILYMEMBERS
ADD CONSTRAINT FAMILYID_FK
FOREIGN KEY (FAMILYID) REFERENCES FAMILY(FAMILYID);


CREATE TABLE KEYEVENTS
(
	EVENTSID INT PRIMARY KEY IDENTITY(1,1) NOT NULL
	, OBITUARYID INT NOT NULL
	, EVENTDATE DATE NOT NULL
	, EVENTNAME VARCHAR(255) NOT NULL
	, DATEADDED DATETIME DEFAULT GETDATE() NOT NULL
	, FOREIGN KEY (OBITUARYID) REFERENCES OBITUARY(OBITUARYID)
)


-- STORED PROCEDURES --

--INSERT USER--
CREATE PROCEDURE SP_INSERT_USER
	@USERNAME VARCHAR(100)
	, @FIRST_NAME VARCHAR(100)
	, @LAST_NAME VARCHAR(100)
	, @MI CHAR(2)
	, @CONTACT_NUMBER VARCHAR(11)
	, @EMAIL VARCHAR(100)
	, @BIRTHDATE DATE
	, @PICTURE VARCHAR(255)
	, @HASHED_PASSWORD VARCHAR(100)
AS
BEGIN
	INSERT INTO [USER](USERNAME, FIRST_NAME, LAST_NAME, MI, CONTACT_NUMBER, EMAIL, BIRTHDATE, PICTURE, HASHED_PASSWORD)
	VALUES (@USERNAME, @FIRST_NAME, @LAST_NAME, @MI, @CONTACT_NUMBER, LOWER(@EMAIL), @BIRTHDATE, @PICTURE, @HASHED_PASSWORD)
END

SELECT * FROM [USER]

--UPDATE USER--
CREATE PROCEDURE SP_UPDATE_USER
    @USERNAME VARCHAR(100),
    @FIRST_NAME VARCHAR(100),
    @LAST_NAME VARCHAR(100),
    @MI CHAR(2),
    @CONTACT_NUMBER VARCHAR(11),
    @EMAIL VARCHAR(100),
    @BIRTHDATE DATE,
    @PICTURE VARCHAR(255),
    @NEW_HASHED_PASSWORD VARCHAR(100) = NULL 
AS
BEGIN
    IF EXISTS (SELECT 1 FROM [USER] WHERE USERNAME = @USERNAME AND EMAIL = @EMAIL)
    BEGIN
        UPDATE A
        SET USERNAME = @USERNAME,
			EMAIL = LOWER(@EMAIL),
			FIRST_NAME = @FIRST_NAME,
            LAST_NAME = @LAST_NAME,
            MI = @MI,
            CONTACT_NUMBER = @CONTACT_NUMBER,
            BIRTHDATE = @BIRTHDATE,
            PICTURE = @PICTURE,
            HASHED_PASSWORD = COALESCE(@NEW_HASHED_PASSWORD, HASHED_PASSWORD)
        FROM [USER] A
        WHERE USERNAME = @USERNAME
    END
END

CREATE PROCEDURE SP_UPDATE_USER_2
    @USERNAME VARCHAR(100),
    @FIRST_NAME VARCHAR(100),
    @LAST_NAME VARCHAR(100),
    @MI CHAR(2),
    @CONTACT_NUMBER VARCHAR(11),
    @BIRTHDATE DATE,
    @PICTURE VARCHAR(255),
	@EMAIL VARCHAR(100)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM [USER] WHERE EMAIL = @EMAIL)
    BEGIN
        UPDATE A
        SET USERNAME = @USERNAME,
			FIRST_NAME = @FIRST_NAME,
            LAST_NAME = @LAST_NAME,
            MI = @MI,
            CONTACT_NUMBER = @CONTACT_NUMBER,
            BIRTHDATE = @BIRTHDATE,
            PICTURE = @PICTURE
        FROM [USER] A
        WHERE EMAIL = @EMAIL
    END
END

DBCC CHECKIDENT ([USER], NORESEED)
SELECT * FROM [USER]
DELETE FROM [USER]
DBCC CHECKIDENT([USER],RESEED,6)

--DELETE USER--
CREATE PROCEDURE SP_DELETE_USER
    @USERID INT
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        -- Store the OBITUARYID, GALLERYID, FAMILYID, and OBITCUSTID for later use
        DECLARE @OBITUARYID INT, @GALLERYID INT, @FAMILYID INT, @OBITCUSTID INT;

        -- Get all obituaries associated with the user
        DECLARE obituary_cursor CURSOR FOR
        SELECT OBITUARYID, GALLERYID, FAMILYID, OBITCUSTID
        FROM OBITUARY
        WHERE USERID = @USERID;

        OPEN obituary_cursor;
        FETCH NEXT FROM obituary_cursor INTO @OBITUARYID, @GALLERYID, @FAMILYID, @OBITCUSTID;

        WHILE @@FETCH_STATUS = 0
        BEGIN
            -- Delete related records in GALLERY_MEDIA table
            DELETE FROM GALLERYMEDIA
            WHERE GALLERYID = @GALLERYID;

            -- Delete related records in FAMILYMEMBERS table
            DELETE FROM FAMILYMEMBERS
            WHERE FAMILYID = @FAMILYID;

            -- Delete the obituary itself
            DELETE FROM OBITUARY
            WHERE OBITUARYID = @OBITUARYID;

            -- Now that the obituary is deleted, we can delete the customization
            DELETE FROM OBITUARY_CUSTOMIZATION
            WHERE OBITCUSTID = @OBITCUSTID;

            -- Delete the associated gallery
            DELETE FROM GALLERY
            WHERE GALLERYID = @GALLERYID;

            -- Delete the associated family
            DELETE FROM FAMILY
            WHERE FAMILYID = @FAMILYID;

            FETCH NEXT FROM obituary_cursor INTO @OBITUARYID, @GALLERYID, @FAMILYID, @OBITCUSTID;
        END

        CLOSE obituary_cursor;
        DEALLOCATE obituary_cursor;

        -- Finally, delete the user
        DELETE FROM [USER]
        WHERE USERID = @USERID;

        COMMIT TRANSACTION;

        SELECT 'User and related records deleted successfully' AS Result;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;

        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
        DECLARE @ErrorState INT = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH;
END

--INSERT OBITUARY--
CREATE PROCEDURE SP_INSERT_OBITUARY
	@USERID INT
	, @GALLERYID INT
	, @FAMILYID INT
	, @OBITCUSTID INT
	, @BIOGRAPHY VARCHAR(500)
	, @OBITUARYNAME VARCHAR(100)
	, @OBITUARYPHOTO NVARCHAR(255)
	, @DATEOFBIRTH DATE
	, @DATEOFDEATH DATE
	, @KEYEVENTS VARCHAR(300)
	, @OBITUARYTEXT VARCHAR(300)
	, @FUN_DATETIME DATETIME
	, @FUN_LOCATION VARCHAR(300)
	, @ADTLINFO VARCHAR(300)
	, @FAVORITEQUOTE VARCHAR(100)
	, @PRIVACY VARCHAR(10)
	, @ENAGUESTBOOK BIT
AS
BEGIN
	INSERT INTO OBITUARY(USERID, GALLERYID, FAMILYID, OBITCUSTID, BIOGRAPHY, OBITUARYNAME, OBITUARY_PHOTO, DATEOFBIRTH, DATEOFDEATH, KEYEVENTS, OBITUARYTEXT, FUN_DATETIME, FUN_LOCATION, ADTLINFO, FAVORITEQUOTE, PRIVACY, ENAGUESTBOOK, LASTMODIFIED)
	VALUES(@USERID, @GALLERYID, @FAMILYID, @OBITCUSTID, @BIOGRAPHY, @OBITUARYNAME, @OBITUARYPHOTO, @DATEOFBIRTH, @DATEOFDEATH, @KEYEVENTS, @OBITUARYTEXT, @FUN_DATETIME, @FUN_LOCATION, @ADTLINFO, @FAVORITEQUOTE, @PRIVACY, @ENAGUESTBOOK, GETDATE())

	SELECT SCOPE_IDENTITY() AS OBITUARYID
END

SELECT * FROM OBITUARY
DELETE FROM OBITUARY
DBCC CHECKIDENT(OBITUARY,RESEED,6)

--DELETE OBITUARY--
CREATE PROCEDURE SP_DELETE_OBITUARY
    @OBITUARYID INT
AS
BEGIN
    SET NOCOUNT ON;
    
    BEGIN TRY
        BEGIN TRANSACTION;

        -- Store the GALLERYID, FAMILYID, and OBITCUSTID for later use
        DECLARE @GALLERYID INT, @FAMILYID INT, @OBITCUSTID INT;
        SELECT @GALLERYID = GALLERYID, @FAMILYID = FAMILYID, @OBITCUSTID = OBITCUSTID
        FROM OBITUARY
        WHERE OBITUARYID = @OBITUARYID;

        -- Delete related records in GALLERY_MEDIA table
        DELETE FROM GALLERYMEDIA
        WHERE GALLERYID = @GALLERYID;

        -- Delete related records in FAMILYMEMBERS table
        DELETE FROM FAMILYMEMBERS
        WHERE FAMILYID = @FAMILYID;

        -- Delete the obituary itself
        DELETE FROM OBITUARY
        WHERE OBITUARYID = @OBITUARYID;

        -- Now that the obituary is deleted, we can delete the customization
        DELETE FROM OBITUARY_CUSTOMIZATION
        WHERE OBITCUSTID = @OBITCUSTID;

        -- Delete the associated gallery
        DELETE FROM GALLERY
        WHERE GALLERYID = @GALLERYID;

        -- Delete the associated family
        DELETE FROM FAMILY
        WHERE FAMILYID = @FAMILYID;

        COMMIT TRANSACTION;
        
        SELECT 'Obituary and related records deleted successfully' AS Result;
    END TRY
    BEGIN CATCH
        ROLLBACK TRANSACTION;
        
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        DECLARE @ErrorSeverity INT = ERROR_SEVERITY();
        DECLARE @ErrorState INT = ERROR_STATE();

        RAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);
    END CATCH;
END


--INSERT OBITUARY CUSTOMIZATION--
CREATE PROCEDURE SP_INSERT_OBITUARY_CUSTOMIZATION
	@BGTHEME VARCHAR(20)
	, @PICFRAME VARCHAR(20)
	, @BGMUSIC VARCHAR(50)
	, @VFLOWER VARCHAR(20)
	, @VCANDLE VARCHAR(10)
AS
BEGIN
	INSERT INTO OBITUARY_CUSTOMIZATION(BGTHEME, PICFRAME, BGMUSIC, VFLOWER, VCANDLE)
	VALUES(@BGTHEME, @PICFRAME, @BGMUSIC, @VFLOWER, @VCANDLE)

	SELECT SCOPE_IDENTITY() AS OBITCUSTID
END

SELECT * FROM OBITUARY_CUSTOMIZATION
DELETE FROM OBITUARY_CUSTOMIZATION
DBCC CHECKIDENT([OBITUARY_CUSTOMIZATION], RESEED, 0)


--INSERT FAMILY--
CREATE PROCEDURE SP_INSERT_FAMILY
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO FAMILY (DATECREATED, MODIFIEDDATE)
    VALUES (GETDATE(), GETDATE())

    SELECT SCOPE_IDENTITY() AS FAMILYID
END

SELECT * FROM FAMILY
DELETE FROM FAMILY
DBCC CHECKIDENT(FAMILY,RESEED, 0)


--INSERT FAMILY MEMBERS--
CREATE PROCEDURE SP_INSERT_FAMILYMEMBERS
    @FAMILYID INT,
    @MEMBERNAME VARCHAR(200),
    @RELATIONSHIP VARCHAR(50)
AS
BEGIN
    INSERT INTO FAMILYMEMBERS(FAMILYID, MEMBERNAME, RELATIONSHIP)
    VALUES(@FAMILYID, @MEMBERNAME, @RELATIONSHIP)
END

SELECT * FROM FAMILYMEMBERS
DELETE FROM FAMILYMEMBERS
DBCC CHECKIDENT(FAMILYMEMBERS,RESEED, 0)



--INSERT GALLERY--
CREATE PROCEDURE SP_INSERT_GALLERY
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO GALLERY (CREATIONDATE, MODIFIEDDATE)
    VALUES (GETDATE(), GETDATE())

    SELECT SCOPE_IDENTITY() AS GALLERYID
END

SELECT * FROM GALLERY
DELETE FROM GALLERY
DBCC CHECKIDENT(GALLERY,RESEED, 0)



--INSERT GALLERYMEDIA--
CREATE PROCEDURE SP_INSERT_GALLERY_MEDIA
	@GALLERYID INT
	, @MEDIATYPE VARCHAR(50)
	, @FILENAME VARCHAR(255)
AS
BEGIN
	INSERT INTO GALLERYMEDIA(GALLERYID, MEDIATYPE, [FILENAME])
	VALUES(@GALLERYID, @MEDIATYPE, @FILENAME)
END

SELECT * FROM GALLERYMEDIA
DELETE FROM GALLERYMEDIA
DBCC CHECKIDENT(GALLERYMEDIA,RESEED, 0)


--INSERT GUESTBOOK--
CREATE PROCEDURE SP_INSERT_GUESTBOOK
	@USERID INT
	, @OBITUARYID INT
	, @GUESTNAME VARCHAR(255)
	, @MESSAGE VARCHAR(300)
AS
BEGIN
	INSERT INTO GUESTBOOK(USERID, OBITUARYID, GUESTNAME, [MESSAGE])
	VALUES(@USERID, @OBITUARYID, @GUESTNAME, @MESSAGE)

	SELECT SCOPE_IDENTITY() AS GUESTBOOKID
END

--UPDATE GUESTBOOK--
CREATE PROCEDURE SP_UPDATE_GUESTBOOK
    @USERID INT
	, @OBITUARYID INT
	, @GUESTNAME VARCHAR(255)
	, @MESSAGE VARCHAR(300)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM GUESTBOOK WHERE USERID = @USERID AND OBITUARYID = @OBITUARYID)
    BEGIN
        UPDATE A
        SET GUESTNAME = @GUESTNAME,
			[MESSAGE] = @MESSAGE
        FROM GUESTBOOK A
        WHERE USERID = @USERID
    END
END

--INSERT TRIBUTE--
CREATE PROCEDURE SP_INSERT_TRIBUTE
	@USERID INT
	, @OFFEREDFLOWER BIT
	, @LIGHTEDCANDLE BIT
AS
BEGIN
	INSERT INTO TRIBUTE(USERID, OFFEREDFLOWER, LIGHTEDCANDLE)
	VALUES(@USERID, @OFFEREDFLOWER, @LIGHTEDCANDLE)
END

--UPDATE TRIBUTE--
CREATE PROCEDURE SP_UPDATE_TRIBUTE
	@USERID INT
	, @OFFEREDFLOWER BIT
	, @LIGHTEDCANDLE BIT
AS
BEGIN
	IF EXISTS (SELECT 1 FROM [USER] WHERE USERID = @USERID)
    BEGIN
        UPDATE A
        SET OFFEREDFLOWER = @OFFEREDFLOWER,
			LIGHTEDCANDLE = @LIGHTEDCANDLE
        FROM TRIBUTE A
        WHERE USERID = @USERID
    END
END



--RETRIEVING DATA--
SELECT * FROM [USER]
SELECT * FROM OBITUARY
SELECT * FROM OBITUARY_CUSTOMIZATION
SELECT * FROM GALLERY
SELECT * FROM GALLERYMEDIA
SELECT * FROM GUESTBOOK
SELECT * FROM FAMILY
SELECT * FROM FAMILYMEMBERS
SELECT * FROM GUESTBOOK
SELECT * FROM KEYEVENTS


 --TEST QUERIES--
SELECT * 
FROM OBITUARY AS O
INNER JOIN OBITUARY_CUSTOMIZATION AS OC 
ON O.OBITCUSTID = OC.OBITCUSTID
WHERE OBITUARYID = 6

SELECT * FROM FAMILYMEMBERS
WHERE FAMILYID = 23

SELECT * FROM GALLERYMEDIA WHERE GALLERYID = 24

SELECT * FROM OBITUARY WHERE PRIVACY = 'Public'

SELECT * FROM GUESTBOOK WHERE OBITUARYID = 17

SELECT G.USERID, G.GUESTNAME, G.MESSAGE, G.POSTINGDATE, U.PICTURE , U.FIRST_NAME, U.MI, U.LAST_NAME 
							FROM GUESTBOOK AS G
							INNER JOIN [USER] AS U ON U.USERID = G.USERID
							WHERE OBITUARYID = 17

UPDATE OBITUARY
SET ENAGUESTBOOK = 1 WHERE OBITUARYID = 17

UPDATE OBITUARY
SET PRIVACY = 'Private' WHERE OBITUARYID = 17